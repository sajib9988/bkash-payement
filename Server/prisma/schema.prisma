generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  COMPLETED
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  devices  Device[]
  orders   Order[]
  payments Payment[]
}

model Device {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  userAgent  String
  ipAddress  String
  lastActive DateTime @default(now())
  createdAt  DateTime @default(now())
}

model Product {
  id          String   @id @default(uuid())
  title       String
  description String?
  price       Float
  weight     Float?   @default(0) // Optional field for product weight
  image       Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderItems  OrderItem[]
  PaymentItem PaymentItem[]
}

model Order {
  id              String        @id @default(uuid())
  userId          String
  totalAmount     Float
  status          PaymentStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  shippingName    String
  shippingPhone   String
  shippingStreet  String
  shippingCity    String
  shippingZip     String
  shippingCountry String
  paymentGateway  String?       // New field for payment gateway
  paypalOrderId   String?       @unique // New field for PayPal order ID
  payerId         String?       // New field for PayPal payer ID
  payerEmail      String?       // New field for PayPal payer email
  payerCountryCode String?    // New field for PayPal payer country code


  user       User        @relation(fields: [userId], references: [id])
  payment    Payment?    @relation(fields: [paymentId], references: [id])
  orderItems OrderItem[]
  paymentId  String?
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int    @default(1)
  price     Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Payment {
  id                 String        @id @default(uuid())
  userId             String
  amount             Float
  invoice            String
  status             PaymentStatus @default(PENDING)
  transactionId      String?       @unique
  paymentGatewayData Json?
  billingName        String?
  billingEmail       String?
  billingPhone       String?
  billingAddress     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id])
  paymentItems PaymentItem[]
  Order        Order[]
}

model PaymentItem {
  id        String @id @default(uuid())
  paymentId String
  productId String
  quantity  Int

  payment Payment @relation(fields: [paymentId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}
